<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.ucp.env.service.UsermenuMapper">

    <select id="menulist" parameterType="java.util.HashMap" resultType="egovMap">
    /* menulist */
        select TB.SGROUP3||':'||TB.RUN_YN AS MENU_ID
             , CASE WHEN tb.menu_level = 3 THEN TB.SGROUP2
                    WHEN tb.menu_level = 2 THEN TB.SGROUP1 ELSE ''  END AS PRNT_MENU_ID
             , CASE WHEN tb.menu_level = 3 THEN 'true' ELSE 'false' END AS ISLF
             , 'true' EXPD
             , tb.*
          from ( select 'N' YN , SM.* from SYS_MENU sm
                  where SGROUP1 || SGROUP2  || SGROUP3 IN
                      ( select SGROUP
                          from ( select SGROUP1 || SGROUP2  || SGROUP3 SGROUP from SYS_MENU sm) tb
                                  where SGROUP NOT IN
                                      ( select DISTINCT SGROUP from (
                                        select SGROUP1 || SGROUP1  || SGROUP1 SGROUP from USER_MENU um where ID = #{userId}
                                        UNION ALL
                                        select SGROUP1 || SGROUP2  || SGROUP2 SGROUP from USER_MENU um where ID = #{userId}
                                        UNION ALL
                                        select SGROUP1 || SGROUP2  || SGROUP3 SGROUP from USER_MENU um where ID = #{userId}
                                      )
                               )
                      )
                 UNION ALL
                 select 'Y' YN , SM.* from SYS_MENU sm 
                  where SGROUP1 || SGROUP2  || SGROUP3 IN
                      ( select DISTINCT SGROUP
                          from ( select SGROUP1 || SGROUP1  || SGROUP1 SGROUP from USER_MENU um where ID = #{userId}
                                 UNION ALL 
                                 select SGROUP1 || SGROUP2  || SGROUP2 SGROUP from USER_MENU um where ID = #{userId}
                                 UNION ALL 
                                 select SGROUP1 || SGROUP2  || SGROUP3 SGROUP from USER_MENU um where ID = #{userId}
                               )
                      )
               ) tb
      order by SGROUP3
    </select>    
    
    <insert id="insertUsermenu" parameterType="java.util.HashMap">
    /* insertUsermenu */
        insert into USER_MENU
             ( SYS_GUBUN   , SGROUP1    , SGROUP2    , SGROUP3    , ID        )
        values
             ( #{sysGubun} , #{sgroup1} , #{sgroup2} , #{sgroup3} , #{userId} )
    </insert>
    
    <delete id="deleteUsermenu" parameterType="java.util.HashMap">
    /* deleteUsermenu */
        delete from USER_MENU
         where ID = #{userId}
           and SGROUP3 = #{sgroup3}
    </delete>
    
	<!--
    <update id="update_grpauth_menu" parameterType="java.util.HashMap">
        <![CDATA[
        update CM_GRP_AUTH_LVL_MENU
        set
              RGS_AUTH_YN = #{RGS_AUTH_YN}
            , SEA_AUTH_YN = #{RGS_AUTH_YN}
            , UPD_AUTH_YN = #{RGS_AUTH_YN}
            , DEL_AUTH_YN = #{RGS_AUTH_YN}
            , UPD_USER_ID = #{UPD_USER_ID}
            , UPD_DATE = NOW()
        where
            PGM_MENU_ID = #{PGM_MENU_ID}
            and GRP_ID = #{GRP_ID}
            and AUTH_LVL = #{AUTH_LVL}::numeric
        ]]>
    </update>
	 
    <select id="list_grpauth_menu_back" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <![CDATA[
            select
                A.*
                , (CASE WHEN (select COUNT(*) from CM_PGM_MENU where A.PGM_MENU_ID = PRNT_PGM_MENU_ID) > 0 
                  THEN 'false'
                  ELSE 'true'
                  END) as ISLF
                , NVL(B.SEA_AUTH_YN, 'N') as SEA_AUTH_YN
                , NVL(B.RGS_AUTH_YN, 'N') as RGS_AUTH_YN
                , NVL(B.UPD_AUTH_YN, 'N') as UPD_AUTH_YN
                , NVL(B.DEL_AUTH_YN, 'N') as DEL_AUTH_YN
                , 'true' as EXPD
            from
            (
                select
                    ROWNUM as RK 
                    , PGM_MENU_ID
                    ,PGM_MENU_NM_KO
                    ,PRNT_PGM_MENU_ID
                    /* ,LEVEL_ID */
                    /* ,PARENT */
                    , LEVEL as LVL
                from CM_PGM_MENU
                where USE_TY_CD = 'Y'                
                START WITH PGM_MENU_ID = (select SYS_TOP_MENU_ID from CM_TOP_MENU where SYS_ID = 'ESS')
                /* START WITH PRNT_PGM_MENU_ID IS NULL */
                CONNECT BY PRIOR  PGM_MENU_ID = PRNT_PGM_MENU_ID        
                ORDER SIBLINGS BY PRNT_PGM_MENU_ID asc, SORT_ORDR asc
            ) A
            ,(
                select * from CM_GRP_AUTH_LVL_MENU
                where GRP_ID = #{GRP_ID} 
                  and AUTH_LVL = #{AUTH_LVL}::numeric
            ) B
            where A.PGM_MENU_ID = B.PGM_MENU_ID(+)
         order by A.RK        
        ]]>
    </select>

    <insert id="copy_grpauth_menu" parameterType="java.util.HashMap">
        <![CDATA[
        DECLARE
        BEGIN

            delete from CM_GRP_AUTH_LVL_MENU
            where 1 = 1
                and GRP_ID = #{GRP_ID_TO}
                and AUTH_LVL = #{AUTH_LVL_TO}
            ;

            insert into CM_GRP_AUTH_LVL_MENU
            (
                PGM_MENU_ID
                , GRP_ID
                , AUTH_LVL
                , RGS_AUTH_YN
                , SEA_AUTH_YN    
                , UPD_AUTH_YN
                , DEL_AUTH_YN
                , RGS_USER_ID
                , RGS_DATE
                , UPD_USER_ID
                , UPD_DATE
            )
            select
                PGM_MENU_ID
                , #{GRP_ID_TO}
                , #{AUTH_LVL_TO}
                , RGS_AUTH_YN
                , SEA_AUTH_YN    
                , UPD_AUTH_YN
                , DEL_AUTH_YN
                , #{RGS_USER_ID}
                , RGS_DATE
                , #{UPD_USER_ID}
                , UPD_DATE
            from CM_GRP_AUTH_LVL_MENU
            where 1 = 1
                and GRP_ID = #{GRP_ID}
                and AUTH_LVL = #{AUTH_LVL}::numeric
            ;
        END;
        ]]>
    </insert>

    <select id="get_grpId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
    /* get_grpId */
        select SEA_AUTH_YN    
             , RGS_AUTH_YN
             , UPD_AUTH_YN
             , DEL_AUTH_YN
          from CM_GRP_AUTH_LVL_MENU
         where PGM_MENU_ID = #{PGM_MENU_ID}
           and GRP_ID   = #{GRP_ID}
           and AUTH_LVL = #{AUTH_LVL}::numeric
    </select>

    <select id="list_cm_dstrt_cd_mng" parameterType="java.util.HashMap" resultType="egovMap">
    /* list_cm_dstrt_cd_mng */
            select DSTRT_CD
                 , DSTRT_NM
              from CM_DSTRT_CD_MNG
             where USE_TY_CD = 'Y'
          order by DSTRT_NM
    </select>

    <select id="userlist" parameterType="java.util.HashMap" resultType="egovMap">
    /* userlist */
        select  A.DSTRT_CD
                , (select dstrt_nm from cm_dstrt_cd_mng cdcm where cdcm.DSTRT_CD = A.dstrt_cd) DSTRT_NM
                , A.GRP_ID
                , A.GRP_NM_KO
                , B.CD_NM_KO as USE_TY_NM
                , C.AUTH_LVL_NM
                , C.AUTH_LVL
          from  CM_GROUP A
                ,( select CD_ID, CD_NM_KO from CM_TC_CODE where CD_GRP_ID = 'USE_TY' and CD_TY = 'C' ) B
                , CM_GRP_AUTH_LVL C
          where 1 = 1
            and A.USE_TY_CD = B.CD_ID
            and A.GRP_ID = C.GRP_ID
        <if test="DSTRT_CD != null and DSTRT_CD != '' "> and A.DSTRT_CD LIKE CONCAT('%', #{DSTRT_CD}, '%') </if>
        <if test="GRP_ID != null and GRP_ID != '' and AUTH_LVL != null and AUTH_LVL != '' ">
                and NOT ( A.GRP_ID = #{GRP_ID}
                          and C.AUTH_LVL = #{AUTH_LVL}::numeric
                        )
        </if>
        <if test="GRP_NM_KO != null and GRP_NM_KO != '' "> and A.GRP_NM_KO LIKE CONCAT('%', #{GRP_NM_KO}, '%') </if>
        <if test="USE_TY_CD != null and USE_TY_CD != '' "> and A.USE_TY_CD = #{USE_TY_CD} </if>
		ORDER BY ${sidx} ${sord}
    </select>
 -->
</mapper>   
