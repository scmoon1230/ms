<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.ucp.wrks.sstm.menu.service.MenuUserMapper">    

    <select id="get_userId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select SEA_AUTH_YN             , RGS_AUTH_YN
             , UPD_AUTH_YN             , DEL_AUTH_YN
          from CM_USER_PGM_MENU
         where PGM_MENU_ID = #{PGM_MENU_ID}
           and DSTRT_CD = #{DSTRT_CD}
           and USER_ID = #{USER_ID}
    </select>

    <!-- 지구명 -->
    <select id="getCM_DSTRT_CD_MNG" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        select DSTRT_CD       , DSTRT_NM
          from CM_DSTRT_CD_MNG
         where USE_TY_CD = 'Y'
      order by DSTRT_NM
    </select>

    <select id="list_user" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <![CDATA[
            select 
                A.USER_ID
                , B.USER_NM_KO
                , A.DSTRT_CD
                , C.DSTRT_NM
                , E.GRP_NM_KO ||'('|| (select AUTH_LVL_NM from CM_GRP_AUTH_LVL where GRP_ID = D.GRP_ID and AUTH_LVL = D.AUTH_LVL) || ')' as GRP_NM_KO
                , B.MOBL_NO
                , B.USE_TY_CD
                , F.CD_NM_KO as USE_NM
            from 
                CM_USER_DSTRT A
                , CM_USER B
                left join(select CD_ID, CD_NM_KO from CM_TC_CODE where CD_GRP_ID = 'USE_TY') F
                    ON B.USE_TY_CD = F.CD_ID
                , CM_DSTRT_CD_MNG C
                , CM_GRP_USER D
                , CM_GROUP E
            where 
                A.USER_ID = B.USER_ID
                and A.DSTRT_CD = C.DSTRT_CD
                and A.USER_ID = D.USER_ID
                and D.GRP_ID = E.GRP_ID
        ]]>
        <if test="DSTRT_CD   != null and DSTRT_CD   != '' "> and A.DSTRT_CD = #{DSTRT_CD}                          </if>        
        <if test="USER_ID    != null and USER_ID    != '' "> and A.USER_ID != #{USER_ID}                           </if>
        <if test="USER_NM_KO != null and USER_NM_KO != '' "> and B.USER_NM_KO LIKE CONCAT('%', #{USER_NM_KO}, '%') </if>
        <if test="DSTRT_NM   != null and DSTRT_NM   != '' "> and C.DSTRT_NM LIKE CONCAT('%', #{DSTRT_NM}, '%')     </if>
        <if test="GRP_NM_KO  != null and GRP_NM_KO  != '' "> and E.GRP_NM_KO LIKE CONCAT('%', #{GRP_NM_KO}, '%')   </if>
        <if test="USE_TY_CD  != null and USE_TY_CD  != '' "> and B.USE_TY_CD = #{USE_TY_CD}                        </if>
    </select>

    <select id="list" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <![CDATA[
            select @rownum:=@rownum+1 as RK, 
                     Q.*
              from (
                        select  P5.PGM_MENU_ID
                                , P5.PGM_MENU_NM_KO
                                , P5.PRNT_PGM_MENU_ID
                                , P5.SORT_ORDR
                                , CONVERT(P5.LVL,CHAR) as LVL 
                                , (CASE WHEN ( select COUNT(*)
                                               from CM_PGM_MENU 
                                              where P5.PGM_MENU_ID = PRNT_PGM_MENU_ID) > 0 THEN 'false' ELSE 'true' END ) as ISLF
                                , CASE WHEN B.SEA_AUTH_YN IS NULL THEN 'N' ELSE 'Y' END as SEA_AUTH_YN
                                , CASE WHEN B.RGS_AUTH_YN IS NULL THEN 'N' ELSE 'Y' END as RGS_AUTH_YN
                                , CASE WHEN B.UPD_AUTH_YN IS NULL THEN 'N' ELSE 'Y' END as UPD_AUTH_YN
                                , CASE WHEN B.DEL_AUTH_YN IS NULL THEN 'N' ELSE 'Y' END as DEL_AUTH_YN                                  
                                , 'true' as EXPD
                          from    
                                (
                                    select P1.*
                                        , P2.USE_TY_CD
                                    from 
                                        (
                                            WITH RECURSIVE P (PGM_MENU_ID, PGM_MENU_NM_KO, PRNT_PGM_MENU_ID, SORT_ORDR, LVL) AS
                                            (
                                            select PGM_MENU_ID, PGM_MENU_NM_KO, PRNT_PGM_MENU_ID, SORT_ORDR, 1 LVL
                                            from CM_PGM_MENU
                                            where 1 = 1
                                            and USE_TY_CD = 'Y' 
                                            and PGM_MENU_ID = ( select SYS_TOP_MENU_ID
                                                                          from CM_TOP_MENU
                                                                         where SYS_ID = 'TVO') 
                                            union all
                                            select c.PGM_MENU_ID, c.PGM_MENU_NM_KO, c.PRNT_PGM_MENU_ID, c.SORT_ORDR, p.LVL + 1 as LVL
                                            from CM_PGM_MENU c, P p
                                            where 1 = 1 
                                            and USE_TY_CD = 'Y' 
                                            and p.PGM_MENU_ID = c.PRNT_PGM_MENU_ID
                                            )
                                            select * from P
                                        ) P1
                                        , CM_PGM_MENU P2
                                    where P1.PGM_MENU_ID = P2.PGM_MENU_ID
                                ) P5
                                left join (
                                    select *
                                     from CM_USER_PGM_MENU
                                    where USER_ID = #{USER_ID} 
                                      and DSTRT_CD = #{DSTRT_CD}
                                    ) B
                            ON P5.PGM_MENU_ID    = B.PGM_MENU_ID
                      ) Q
                      , (select @rownum:=0) C
                      order by Q.SORT_ORDR asc, Q.LVL asc, Q.PRNT_PGM_MENU_ID asc    
        ]]>
    </select>

    <select id="list_back" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <![CDATA[
            select
                A.*
                , (CASE WHEN (select COUNT(*) from CM_PGM_MENU where A.PGM_MENU_ID = PRNT_PGM_MENU_ID) > 0 
                  THEN 'false'
                  ELSE 'true'
                  END) as ISLF
                , NVL(B.SEA_AUTH_YN, 'N') as SEA_AUTH_YN
                , NVL(B.RGS_AUTH_YN, 'N') as RGS_AUTH_YN
                , NVL(B.UPD_AUTH_YN, 'N') as UPD_AUTH_YN
                , NVL(B.DEL_AUTH_YN, 'N') as DEL_AUTH_YN
                , 'true' as EXPD
            from
            (
                select
                    ROWNUM as RK 
                    , PGM_MENU_ID
                    ,PGM_MENU_NM_KO
                    ,PRNT_PGM_MENU_ID
                    --,LEVEL_ID
                    --,PARENT
                    , LEVEL as LVL
                from CM_PGM_MENU
                where USE_TY_CD = 'Y'
                START WITH PGM_MENU_ID = (select SYS_TOP_MENU_ID from CM_TOP_MENU where SYS_ID = 'ESS')
                -- START WITH PRNT_PGM_MENU_ID IS NULL
                CONNECT BY PRIOR  PGM_MENU_ID = PRNT_PGM_MENU_ID        
                ORDER SIBLINGS BY PRNT_PGM_MENU_ID asc, SORT_ORDR asc
            ) A
            , 
            (
                select * from CM_USER_PGM_MENU
                where USER_ID = #{USER_ID} 
                and DSTRT_CD = #{DSTRT_CD}
            ) B
            where A.PGM_MENU_ID = B.PGM_MENU_ID(+)
            order by A.RK        
        ]]>
    </select>

    <insert id="insert" parameterType="java.util.HashMap">
        <![CDATA[
        insert into CM_USER_PGM_MENU
        (
            PGM_MENU_ID
            , DSTRT_CD
            , USER_ID
            , RGS_AUTH_YN
            , SEA_AUTH_YN    
            , UPD_AUTH_YN
            , DEL_AUTH_YN
            , RGS_USER_ID
            , RGS_DATE
            , UPD_USER_ID
            , UPD_DATE
        )
        values
        (
            #{PGM_MENU_ID}
            , #{DSTRT_CD}
            , #{USER_ID}
            , #{RGS_AUTH_YN}
            , #{RGS_AUTH_YN}
            , #{RGS_AUTH_YN}
            , #{RGS_AUTH_YN}
            , #{RGS_USER_ID}
            , NOW()
            , #{UPD_USER_ID}
            , NOW()
        )
        ]]>
    </insert>

    <insert id="copy" parameterType="java.util.HashMap">
        <![CDATA[
        DECLARE
        BEGIN

            delete from CM_USER_PGM_MENU
            where 1 = 1
                and DSTRT_CD = #{DSTRT_CD_TO}
                and USER_ID = #{USER_ID_TO}
                ;

            insert into CM_USER_PGM_MENU
            (
                PGM_MENU_ID
                , DSTRT_CD
                , USER_ID
                , RGS_AUTH_YN
                , SEA_AUTH_YN    
                , UPD_AUTH_YN
                , DEL_AUTH_YN
                , RGS_USER_ID
                , RGS_DATE
                , UPD_USER_ID
                , UPD_DATE
            )
            select
                PGM_MENU_ID
                , #{DSTRT_CD_TO}
                , #{USER_ID_TO}
                , RGS_AUTH_YN
                , SEA_AUTH_YN    
                , UPD_AUTH_YN
                , DEL_AUTH_YN
                , #{RGS_USER_ID}
                , NOW()
                , #{UPD_USER_ID}
                , NOW()
            from CM_USER_PGM_MENU
            where 1 = 1
                and DSTRT_CD = #{DSTRT_CD}
                and USER_ID = #{USER_ID}
                ;
        END;
        ]]>
    </insert>


    <update id="update" parameterType="java.util.HashMap">
        <![CDATA[
        update CM_USER_PGM_MENU
        set
              RGS_AUTH_YN = #{RGS_AUTH_YN}
            , SEA_AUTH_YN = #{RGS_AUTH_YN}
            , UPD_AUTH_YN = #{RGS_AUTH_YN}
            , DEL_AUTH_YN = #{RGS_AUTH_YN}
            , UPD_USER_ID = #{UPD_USER_ID}
            , UPD_DATE = NOW()
        where
            PGM_MENU_ID = #{PGM_MENU_ID}
            and DSTRT_CD = #{DSTRT_CD}
            and USER_ID = #{USER_ID}
        ]]>
    </update>

    <delete id="delete" parameterType="java.util.HashMap">
        <![CDATA[
        delete from CM_USER_PGM_MENU
        where
            PGM_MENU_ID = #{PGM_MENU_ID}
            and DSTRT_CD = #{DSTRT_CD}
            and USER_ID = #{USER_ID}
        ]]>
    </delete>

</mapper>   
