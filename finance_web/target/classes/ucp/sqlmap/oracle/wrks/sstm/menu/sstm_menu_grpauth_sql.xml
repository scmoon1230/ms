<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper   PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.ucp.wrks.sstm.menu.service.MenuGrpAuthMapper">    

    <select id="get_grpId" parameterType="java.util.HashMap" resultType="java.util.HashMap">
    /* get_grpId */
        select SEA_AUTH_YN    
             , RGS_AUTH_YN
             , UPD_AUTH_YN
             , DEL_AUTH_YN
          from CM_GRP_AUTH_LVL_MENU
         where PGM_MENU_ID = #{PGM_MENU_ID}
           and GRP_ID   = #{GRP_ID}
           and AUTH_LVL = #{AUTH_LVL}::numeric
    </select>

    <!-- 지구명 -->
    <select id="list_cm_dstrt_cd_mng" parameterType="java.util.HashMap" resultType="egovMap">
    /* list_cm_dstrt_cd_mng */
            select DSTRT_CD
                 , DSTRT_NM
              from CM_DSTRT_CD_MNG
             where USE_TY_CD = 'Y'
          order by DSTRT_NM
    </select>

    <select id="list_grpauth" parameterType="java.util.HashMap" resultType="egovMap">
    /* list_grpauth */
        select  A.DSTRT_CD
                , (select dstrt_nm from cm_dstrt_cd_mng cdcm where cdcm.DSTRT_CD = A.dstrt_cd) DSTRT_NM
                , A.GRP_ID
                , A.GRP_NM_KO
                , B.CD_NM_KO as USE_TY_NM
                , C.AUTH_LVL_NM
                , C.AUTH_LVL
          from  CM_GROUP A
                ,( select CD_ID, CD_NM_KO from CM_TC_CODE where CD_GRP_ID = 'USE_TY' and CD_TY = 'C' ) B
                , CM_GRP_AUTH_LVL C
          where 1 = 1
            and A.USE_TY_CD = B.CD_ID
            and A.GRP_ID = C.GRP_ID
        <if test="DSTRT_CD != null and DSTRT_CD != '' "> and A.DSTRT_CD LIKE CONCAT('%', #{DSTRT_CD}, '%') </if>
        <if test="GRP_ID != null and GRP_ID != '' and AUTH_LVL != null and AUTH_LVL != '' ">
                and NOT ( A.GRP_ID = #{GRP_ID}
                          and C.AUTH_LVL = #{AUTH_LVL}::numeric
                        )
        </if>
        <if test="GRP_NM_KO != null and GRP_NM_KO != '' "> and A.GRP_NM_KO LIKE CONCAT('%', #{GRP_NM_KO}, '%') </if>
        <if test="USE_TY_CD != null and USE_TY_CD != '' "> and A.USE_TY_CD = #{USE_TY_CD} </if>
		ORDER BY ${sidx} ${sord}
    </select>
    

    <select id="list_grpauth_menu" parameterType="java.util.HashMap" resultType="egovMap">
    /* list_grpauth_menu */
        <![CDATA[    
            select Q.*            	/* , @rownum:=@rownum+1 as RK */
              from (
                        select  P5.PGM_MENU_ID
                                , P5.PGM_MENU_NM_KO
                                , P5.PRNT_PGM_MENU_ID
                                , P5.SORT_ORDR
                                , P5.LVL::text as LVL 
                                , (CASE WHEN ( select COUNT(*)
                                               from CM_PGM_MENU 
                                              where P5.PGM_MENU_ID = PRNT_PGM_MENU_ID) > 0 THEN 'false' ELSE 'true' END ) as ISLF
                                , CASE WHEN B.SEA_AUTH_YN IS NULL THEN 'N' ELSE 'Y' END as SEA_AUTH_YN
                                , CASE WHEN B.RGS_AUTH_YN IS NULL THEN 'N' ELSE 'Y' END as RGS_AUTH_YN
                                , CASE WHEN B.UPD_AUTH_YN IS NULL THEN 'N' ELSE 'Y' END as UPD_AUTH_YN
                                , CASE WHEN B.DEL_AUTH_YN IS NULL THEN 'N' ELSE 'Y' END as DEL_AUTH_YN                                  
                                , 'true' as EXPD
                          from    
                                (
                                    select P1.*
                                        , P2.USE_TY_CD
                                    from 
                                        (
                                            WITH RECURSIVE P (PGM_MENU_ID, PGM_MENU_NM_KO, PRNT_PGM_MENU_ID, SORT_ORDR, LVL) AS
                                            (
                                            select PGM_MENU_ID, PGM_MENU_NM_KO, PRNT_PGM_MENU_ID, SORT_ORDR, 1 LVL
                                            from CM_PGM_MENU
                                            where 1 = 1
                                            and USE_TY_CD = 'Y' 
                                            and PGM_MENU_ID = ( select SYS_TOP_MENU_ID
                                                                          from CM_TOP_MENU
                                                                         where SYS_ID = #{SYS_ID}) 
                                            union all
                                            select c.PGM_MENU_ID, c.PGM_MENU_NM_KO, c.PRNT_PGM_MENU_ID, c.SORT_ORDR, p.LVL + 1 as LVL
                                            from CM_PGM_MENU c, P p
                                            where 1 = 1 
                                            and USE_TY_CD = 'Y' 
                                            and p.PGM_MENU_ID = c.PRNT_PGM_MENU_ID
                                            )
                                            select * from P
                                        ) P1
                                        , CM_PGM_MENU P2
                                    where P1.PGM_MENU_ID = P2.PGM_MENU_ID
                                ) P5
                           left join (
                                    select *
                                     from CM_GRP_AUTH_LVL_MENU
                                    where GRP_ID = #{GRP_ID} 
                                      and AUTH_LVL = #{AUTH_LVL}::numeric
                                    ) B
                            on P5.PGM_MENU_ID    = B.PGM_MENU_ID
                      ) Q
                      /* , (select @rownum:=0) C */
                   order by Q.SORT_ORDR asc, Q.LVL asc, Q.PRNT_PGM_MENU_ID asc    
        ]]>
    </select>    
	<!-- 
    <select id="list_grpauth_menu_back" parameterType="java.util.HashMap" resultType="java.util.HashMap">
        <![CDATA[
            select
                A.*
                , (CASE WHEN (select COUNT(*) from CM_PGM_MENU where A.PGM_MENU_ID = PRNT_PGM_MENU_ID) > 0 
                  THEN 'false'
                  ELSE 'true'
                  END) as ISLF
                , NVL(B.SEA_AUTH_YN, 'N') as SEA_AUTH_YN
                , NVL(B.RGS_AUTH_YN, 'N') as RGS_AUTH_YN
                , NVL(B.UPD_AUTH_YN, 'N') as UPD_AUTH_YN
                , NVL(B.DEL_AUTH_YN, 'N') as DEL_AUTH_YN
                , 'true' as EXPD
            from
            (
                select
                    ROWNUM as RK 
                    , PGM_MENU_ID
                    ,PGM_MENU_NM_KO
                    ,PRNT_PGM_MENU_ID
                    /* ,LEVEL_ID */
                    /* ,PARENT */
                    , LEVEL as LVL
                from CM_PGM_MENU
                where USE_TY_CD = 'Y'                
                START WITH PGM_MENU_ID = (select SYS_TOP_MENU_ID from CM_TOP_MENU where SYS_ID = 'ESS')
                /* START WITH PRNT_PGM_MENU_ID IS NULL */
                CONNECT BY PRIOR  PGM_MENU_ID = PRNT_PGM_MENU_ID        
                ORDER SIBLINGS BY PRNT_PGM_MENU_ID asc, SORT_ORDR asc
            ) A
            ,(
                select * from CM_GRP_AUTH_LVL_MENU
                where GRP_ID = #{GRP_ID} 
                  and AUTH_LVL = #{AUTH_LVL}::numeric
            ) B
            where A.PGM_MENU_ID = B.PGM_MENU_ID(+)
         order by A.RK        
        ]]>
    </select>
	-->
    <insert id="insert_grpauth_menu" parameterType="java.util.HashMap">
        <![CDATA[
        insert into CM_GRP_AUTH_LVL_MENU
        (   PGM_MENU_ID         , GRP_ID           , AUTH_LVL
            , RGS_AUTH_YN       , SEA_AUTH_YN      , UPD_AUTH_YN        , DEL_AUTH_YN
            , RGS_USER_ID       , RGS_DATE         , UPD_USER_ID        , UPD_DATE        )
        values
        (   #{PGM_MENU_ID}      , #{GRP_ID}        , #{AUTH_LVL}::numeric
            , #{RGS_AUTH_YN}    , #{RGS_AUTH_YN}   , #{RGS_AUTH_YN}     , #{RGS_AUTH_YN}
            , #{RGS_USER_ID}    , NOW()            , #{UPD_USER_ID}     , NOW()           )
        ]]>
    </insert>

    <insert id="copy_grpauth_menu" parameterType="java.util.HashMap">
        <![CDATA[
        DECLARE
        BEGIN

            delete from CM_GRP_AUTH_LVL_MENU
            where 1 = 1
                and GRP_ID = #{GRP_ID_TO}
                and AUTH_LVL = #{AUTH_LVL_TO}
            ;

            insert into CM_GRP_AUTH_LVL_MENU
            (
                PGM_MENU_ID
                , GRP_ID
                , AUTH_LVL
                , RGS_AUTH_YN
                , SEA_AUTH_YN    
                , UPD_AUTH_YN
                , DEL_AUTH_YN
                , RGS_USER_ID
                , RGS_DATE
                , UPD_USER_ID
                , UPD_DATE
            )
            select
                PGM_MENU_ID
                , #{GRP_ID_TO}
                , #{AUTH_LVL_TO}
                , RGS_AUTH_YN
                , SEA_AUTH_YN    
                , UPD_AUTH_YN
                , DEL_AUTH_YN
                , #{RGS_USER_ID}
                , RGS_DATE
                , #{UPD_USER_ID}
                , UPD_DATE
            from CM_GRP_AUTH_LVL_MENU
            where 1 = 1
                and GRP_ID = #{GRP_ID}
                and AUTH_LVL = #{AUTH_LVL}::numeric
            ;
        END;
        ]]>
    </insert>


    <update id="update_grpauth_menu" parameterType="java.util.HashMap">
        <![CDATA[
        update CM_GRP_AUTH_LVL_MENU
        set
              RGS_AUTH_YN = #{RGS_AUTH_YN}
            , SEA_AUTH_YN = #{RGS_AUTH_YN}
            , UPD_AUTH_YN = #{RGS_AUTH_YN}
            , DEL_AUTH_YN = #{RGS_AUTH_YN}
            , UPD_USER_ID = #{UPD_USER_ID}
            , UPD_DATE = NOW()
        where
            PGM_MENU_ID = #{PGM_MENU_ID}
            and GRP_ID = #{GRP_ID}
            and AUTH_LVL = #{AUTH_LVL}::numeric
        ]]>
    </update>

    <delete id="delete_grpauth_menu" parameterType="java.util.HashMap">
        <![CDATA[
        delete from CM_GRP_AUTH_LVL_MENU
        where
            PGM_MENU_ID = #{PGM_MENU_ID}
            and GRP_ID = #{GRP_ID}
            and AUTH_LVL = #{AUTH_LVL}::numeric
        ]]>
    </delete>
</mapper>   
